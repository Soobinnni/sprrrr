package com.board.domain;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.CreationTimestamp;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

/*
 *	[JPA 소개]
 *	JPA(Java Persistent API)는 자바 진영의 ORM 기술 표준입니다. ORM(Object Relational Mapping)이란 객체는 객체대로, 
 *	관계형 DB는 관계형 DB대로 설계하고 중간에서 ORM 프레임워크가 매핑 역할을 수행하는 것을 가르킵니다. 
 *	JPA는 Application과 JDBC(Java Database Connectivity) 사이에서 동작합니다.
 *
 * CRUD 작업이 많이 간결화됩니다.
 * - Create: jpa.persist(member)
 * - Read: Member member = jpa.find(memberId)
 * - Update: member.setName("변경할 이름")
 * - Delete: jpa.remove(member)
 * 
 * [ Entity 매핑 ]
 * - @Entity가 붙은 클래스는 JPA가 관리하며, 이를 Entity라고 합니다. 
 * - 즉 이 어노테이션을 통해 JPA가 사용할 클래스임을 명시합니다.
 * - Entity의 경우 기본 생성자가 필수이며 당연하게도 final과 같은 field가 있으면 안됩니다.
 * 
 * [ @Table ]
 * - @Table은 Entity와 매핑할 테이블 지정합니다. 
 * - name 속성으로 매핑할 테이블 이름을 정할 수 있고, 기본값은 Entity 이름입니다. 
 * - 이외에도 catalog, schema, uniqueConstraints 등의 옵션이 있습니다.
 * 
 * [ Field와 Column 매핑 ]
 * - 필드멤버에 @Id, @Column(name="DB컬럼명"), @Temporal 등을 선언한다.
 * 
 * [ @Temporal ] 
 * - 자바 날짜 타입을 매핑할 때 사용합니다. 
 * - 근래 들어서는 LocalDate, LocalDateTime을 타입으로 하면, 최신 하이버네이트가 지원하기 때문에 annotation을 생략할 수 있습니다.
 * 
 * [ 기본 Key 매핑 ]
 * - Entity를 식별할 수 있는 Key를 매핑할 때 사용할 수 있는 annotation(@Id, @GeneratedValue)과 속성(전략)이 있습니다.
 * - Key(PK)로 매핑할 Field에 @Id annotation만 사용하면 됩니다.
 * - 자동생성(기본 키 생성 전략) : Entity 객체 생성 시 자동으로 Key를 정해주는 방법으로, 각 전략에 따라서 자동 생성됩니다.
 * - 전략 중 하나, identity 사용하기 : @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
 * - 전략 중 하나, sequence 사용하기 : @Id @GeneratedValue(strategy = GenerationType.IDENTITY, generator = "SequenceGenerator의 name에 선언해놓은 이름")
 * 
 * [ @SequenceGenerator ]
 * - Key에 알맞는 유일한 값을 순서대로 생성하는 특별한 DB Object인 DB Sequence를 이용해 자동 생성하는 전략입니다.
 * - 속성
 *  + name : 식별자 생성기 이름
 *  + sequenceName : DB에 등록되어 있는 Sequence 이름
 *  + initialValue : Sequence DDL을 생성할 때 시작하는 수 지정 (DDL 생성 시에만 사용)
 *  + allocationSize : Sequence 호출 한 번에 증가하는 수 (DB Sequence 값이 하나씩 증가하도록 설정되어 있다면 이 값을 반드시 1로 설정)
 *  + catalog / schema : DB catalog, schema 이름
 * 
 * [ @CreationTimestamp ]
 * - Hibernate에서는 엔티티 객체에 대해 INSERT, UPDATE 등의 쿼리가 발생할 때, 현재 시간을 자동으로 저장해주는 @CreationTimestamp와 @UpdateTimestamp 어노테이션을 제공한다.
 */

@Getter
@Setter
@ToString
@Entity //JPA가 관리하도록 설정
@SequenceGenerator(name = "JPABOARD_SEQ_GEN", // 시퀀스 제너레이터 이름
		sequenceName = "JPABOARD_SEQ", // 시퀀스 이름
		initialValue = 1, // 시작값
		allocationSize = 1 // 메모리를 통해 할당할 범위 사이즈
)
@Table(name = "jpaboard") // 데이터베이스 테이블명
public class Board {

	@Id
	@GeneratedValue(strategy= GenerationType.SEQUENCE, /* 사용할 전략을 시퀀스로 선택 */ generator="JPABOARD_SEQ_GEN") //식별자 생성기를 설정해놓은 JPABOARD_SEQ_GEN 으로 설정
	@Column(name = "board_no") // @Column(name = "컬럼명")
	private Long boardNo;

	@Column(name = "title")
	private String title;
	
	@Column(name = "content")
	private String content;
	
	@Column(name = "writer")
	private String writer;
	
	@CreationTimestamp
	@Column(name = "reg_date")
	private Date regDate;
}
