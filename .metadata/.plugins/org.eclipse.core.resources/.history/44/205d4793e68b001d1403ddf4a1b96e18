package com.zeus.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import com.zeus.domain.Member;
import lombok.extern.java.Log;

@Log
@Controller
public class MemberController4 {
	@RequestMapping(value = "/registerSpringForm01", method = RequestMethod.GET)
	public String registerSpringForm01() {
		log.info("registerSpringForm01");
		return "4/registerSpringForm"; // 뷰 파일명
	}

	// 화면에 전달할 데이터를 위해 Model을 매개변수로 지정한다.
	@RequestMapping(value = "/registerSpringForm02", method = RequestMethod.GET)
	public String registerSpringForm02(Model model) {
		log.info("registerSpringForm02");
		// 속성명에 "member"를 지정하고 폼 객체를 모델에 추가한다.
		model.addAttribute("member", new Member());
		return "4/registerSpringForm";
	}

	@RequestMapping(value = "/registerSpringForm03", method = RequestMethod.GET)
	public String registerSpringForm03(Model model) {
		log.info("4/registerSpringForm03");

//속성명에 "user"를 지정하고 폼 객체를 추가한다.
		model.addAttribute("user", new Member());
		return "4/registerSpringForm";
	}

	@RequestMapping(value = "/registerSpringForm04", method = RequestMethod.GET)
	public String registerSpringForm04(Model model) {
		log.info("4/registerSpringForm04");

//속성명에 "user"를 지정하고 폼 객체를 추가한다.
		model.addAttribute("user", new Member());
		return "4/registerSpringForm2"; // 뷰 파일명
	}

	@RequestMapping(value = "/registerSpringForm05", method = RequestMethod.GET)
// 컨트롤러는 기본적으로 자바빈즈 규칙에 맞는 객체는 다시 화면으로 폼 객체를 전달한다.
	public String registerSpringForm05(Member member) {
		log.info("registerSpringForm05");
		return "4/registerSpringForm";
	}

	@RequestMapping(value = "/registerSpringForm06", method = RequestMethod.GET)
// 폼 객체의 속성명은 매개변수로 전달된 자바빈즈 클래스의 타입명을을 이용하여 만든다.
	public String registerSpringForm06(Member user) {
		log.info("registerSpringForm06");
		return "4/registerSpringForm";
	}

	@RequestMapping(value = "/registerSpringForm07", method = RequestMethod.GET)
// @ModelAttribute 애너테이션으로 폼 객체의 속성명을 "user"로 지정한다.
	public String registerSpringForm07(@ModelAttribute("user") Member member) {
		log.info("registerSpringForm07");
		return "4/registerSpringForm";
	}

	@RequestMapping(value = "/registerSpringForm08", method = RequestMethod.GET)
// @ModelAttribute 애너테이션으로 폼 객체의 속성명을 "user"로 지정한다.
	public String registerSpringForm08(@ModelAttribute("user") Member member) {
		log.info("registerSpringForm08");
		return "4/registerSpringForm2"; // 뷰 파일명
	}

	@RequestMapping(value = "/registerSpringForm09", method = RequestMethod.GET)
	public String registerSpringForm09(Model model) {
		log.info("registerSpringForm09");
		Member member = new Member();
// 폼 객체의 프로퍼티에 값을 지정한다.
		member.setUserId("hong");
		member.setUserName("홍길동");
		model.addAttribute("member", member);
		return "4/registerSpringForm";
	}

//입력 처리
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String register(Member member) {
		log.info("register");
		log.info("member.getUserId() = " + member.getUserId());
		log.info("member.getUserName() = " + member.getUserName());
		return "4/resultForm"; // 뷰 파일명
	}
}