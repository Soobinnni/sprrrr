package com.board.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.board.domain.Board;
import com.board.repository.BoardRepository;

/*
 * [ Transactional 어노테이션 ]
 * - 스프링은 @Transactional 어노테이션을 이용한 선언적 트랜잭션 처리를 지원한다.
 * - 모든 작업들이 성공적으로 완료되어야 작업 묶음의 결과를 적용하고, 
 * 	어떤 작업에서 오류가 발생했을 때는 이전에 있던 모든 작업들이 성공적이었더라도 없었던 일처럼 완전히 되돌리는 것이 트랜잭션의 개념이다.
 * - 데이터베이스를 다룰 때 트랜잭션을 적용하면 데이터 추가, 갱신, 
 * 	삭제 등으로 이루어진 작업을 처리하던 중 오류가 발생했을 때 모든 작업들을 원상태로 되돌릴 수 있다. 
 * 	모든 작업들이 성공해야만 최종적으로 데이터베이스에 반영하도록 한다.
 * 
 * [ 스프링에서 @Transactional 을 이용하여 트랜잭션 처리를 하는 방법 ]
 * - 클래스, 메서드 모두에 @Transactional 어노테이션을 붙이면 메서드 레벨의 @Transactional 선언이 우선 적용된다.
 * - @Transactional이 붙은 메서드는 메서드가 포함하고 있는 작업 중에 하나라도 실패할 경우 전체 작업을 취소한다.
 * - readONly = true로 설정되어 있으면, 의도지 않게 데이터를 변경하는 것을 막아줍니다.
 * - 변경 시도 시, Connection is read-only. Queries leading to data modification are not allowed, 메세지 출력
 */

@Service
public class BoardServiceImpl implements BoardService {

	//자동주입
	@Autowired
	private BoardRepository repository;
	
	@Override
	public void register(Board board) throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Board read(Long boardNo) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void modify(Board board) throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void remove(Long boardNo) throws Exception {
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<Board> list() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

}
