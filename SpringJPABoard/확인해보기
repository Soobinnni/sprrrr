
										[ @Autowired의 DI(의존성 주입) ]
										
- 명시적으로 빈을 정의하지 않고도 DI컨테이너에 빈을 자동으로 주입하는 방식
- 타입으로 자동연결을 사용하면 기본적으로 의존성 주입이 반드시 성공한다고 가정하므로, 주입할 타입에 해당하는 빈이 존재하지 않으면 예외가 발생한다.
- 필수 조건을 완화하고 싶다면 @Autowired 애너테이션의 required 속성에 false 를 지정하면 된다.
- @Autowired(required = false)
- class People로 예시


--------------------------------------------------------------------------------------------------------------------------------------
〮 필드 기반 의존성 주입 
			public class People {
				@Autowired
				private Address address;
			}
--------------------------------------------------------------------------------------------------------------------------------------		

--------------------------------------------------------------------------------------------------------------------------------------
〮 생성자 기반 의존성 주입 
- 생성자는 오버로드 생성자(인자가 존재하는)이어야 한다. 생성자 기반의 의존성 주입 방식은 생성자의 인수를 사용하여 의존성을 주입하는 방식이기 때문이다.
- 생성자 기반 의존성 주입 방식을 사용하면 final 로 선언하여 생성 후에 변경되지 않도록 만들 수 있다. 실무 팀에서는 필드 기반 방식보다 생성자 기반 의존성을 선호한다.
			public class People {
				@Autowired
				public People(Address address){
					this.address = address;
				}
			}

* 롬복의 @RequiredArgsConstructor를 이용하여 @Autowired 생략하고도 DI하기
- 생성자주입의 단점은 위의 Constructor(생성자) 코드처럼 생성자를 만들기 번거롭다는 것이다. 
- 이를 보완하기위해 롬복을 사용하여 간단한 방법으로 생성자 주입 방식의 코딩을 할 수 있다.
- @RequiredArgsConstructor : final이 붙거나 @NotNull 이 붙은 필드의 생성자를 자동 생성해주는 롬복 어노테이션

- @RequiredArgsConstructor 를 활용한 생성자 주입
			@RequiredArgsConstructor
			public class People {
				private final Address address;
				private final Name name;
			}

- 위의 예시에 @RequiredArgsConstructor를 사용하지 않으면 원래는 이렇게 생성자 주입을 해야한다
		 public class People {
		    
		        private Address address;
		    
		        private Name name;
		    
		        @Autowired
		        public BannerServiceImpl(Address address, Name name) {
		            this.address = address;
		            this.name = name;
		        }


--------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------
〮 세터 기반 의존성 주입
- 의존성 주입이 필요한 대상 객체의 setter 앞에 @Autowired를 붙인다.
		public class People {
			// 의존성 주입 대상 필드
			private Address address;
			
			// 세터를 사용한 의존성 주입
			@Autowired
			public void setAddress(Address address) {
			this.service = service;
		}	